{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { auth, database } from \"./firebase\";\nimport { createUserWithEmailAndPassword, sendEmailVerification } from \"firebase/auth\";\nimport { ref, set, get } from \"firebase/database\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nfunction Register({\n  setHandlers,\n  setLoading\n}) {\n  _s();\n  const [emailSent, setEmailSent] = useState(false);\n  const navigate = useNavigate();\n  const [Users, setUsers] = useState({\n    name: \"\",\n    branch: \"\",\n    email: \"\",\n    studentId: \"\"\n  });\n  useEffect(() => {\n    if (setHandlers) {\n      setHandlers({\n        handleSendVerification,\n        handleRegister\n      });\n    }\n  }, [setHandlers]);\n  const handleSendVerification = async e => {\n    var _document$getElementB, _document$getElementB2, _document$getElementB3, _document$getElementB4, _document$getElementB5, _document$getElementB6;\n    e.preventDefault();\n    const name = (_document$getElementB = document.getElementById(\"name_input\")) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.value;\n    const branch = (_document$getElementB2 = document.getElementById(\"branch\")) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.value;\n    const email = (_document$getElementB3 = document.getElementById(\"email\")) === null || _document$getElementB3 === void 0 ? void 0 : _document$getElementB3.value;\n    const password = (_document$getElementB4 = document.getElementById(\"password\")) === null || _document$getElementB4 === void 0 ? void 0 : _document$getElementB4.value;\n    const confirmPassword = (_document$getElementB5 = document.getElementById(\"confirm_password\")) === null || _document$getElementB5 === void 0 ? void 0 : _document$getElementB5.value;\n    const studentId = (_document$getElementB6 = document.getElementById(\"student_id_input\")) === null || _document$getElementB6 === void 0 ? void 0 : _document$getElementB6.value;\n    if (!email || !password || !confirmPassword || !studentId || !name || !branch) {\n      toast.error(\"All fields are required!\");\n      return;\n    }\n    if (!/^\\d{10}$/.test(studentId)) {\n      toast.error(\"Enter a valid Student ID!\");\n      return;\n    } else {\n      try {\n        // Check if studentId already exists\n        const studentIdRef = ref(database, \"studentId/\" + studentId);\n        console.log(\"Checking student ID at path:\", studentIdRef);\n        const snapshot = await get(studentIdRef);\n        console.log(\"Snapshot exists:\", snapshot.exists());\n        if (snapshot.exists()) {\n          toast.error(\"Student ID already exists.\");\n          return;\n        }\n      } catch (error) {\n        console.error(\"Firebase get() error:\", error.code, error.message);\n        toast.error(\"Error checking Student ID. Try again.\");\n        return;\n      }\n    }\n    if (password !== confirmPassword) {\n      toast.error(\"Passwords do not match!\");\n      return;\n    }\n    try {\n      setLoading(true);\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n      await sendEmailVerification(user);\n      toast.success(\"Verification email sent! Please check your email.\");\n      setEmailSent(true);\n    } catch (error) {\n      toast.error(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleRegister = async e => {\n    var _document$getElementB7, _document$getElementB8, _document$getElementB9, _document$getElementB10;\n    e.preventDefault();\n    const user = auth.currentUser;\n    if (!user) {\n      toast.error(\"No user found! Please send verification email first.\");\n      return;\n    }\n    await user.reload();\n    if (!user.emailVerified) {\n      toast.error(\"Please verify your email before registering.\");\n      return;\n    }\n    const studentId = (_document$getElementB7 = document.getElementById(\"student_id_input\")) === null || _document$getElementB7 === void 0 ? void 0 : _document$getElementB7.value;\n    const userData = {\n      name: (_document$getElementB8 = document.getElementById(\"name_input\")) === null || _document$getElementB8 === void 0 ? void 0 : _document$getElementB8.value,\n      branch: (_document$getElementB9 = document.getElementById(\"branch\")) === null || _document$getElementB9 === void 0 ? void 0 : _document$getElementB9.value,\n      email: (_document$getElementB10 = document.getElementById(\"email\")) === null || _document$getElementB10 === void 0 ? void 0 : _document$getElementB10.value,\n      studentId: studentId\n    };\n    try {\n      await set(ref(database, \"studentId/\" + studentId), {\n        uid: user.uid\n      });\n      await set(ref(database, \"users/\" + user.uid), userData);\n      const emailResponse = await fetch('http://localhost:3001/api/emails', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: userData.email,\n          name: userData.name\n        })\n      });\n      if (!emailResponse.ok) {\n        throw new Error('Failed to send welcome email');\n      }\n      console.log(\"User data saved and welcome email sent!\");\n      toast.success(\"Registration successful!\");\n      navigate(\"/page3\", {\n        replace: true\n      });\n    } catch (error) {\n      console.error(\"Error:\", error.message);\n      toast.error(error.message);\n    }\n  };\n  return null;\n}\n_s(Register, \"cR3170mk6CfxgfOdYCVHxqR4JPE=\", false, function () {\n  return [useNavigate];\n});\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","useEffect","auth","database","createUserWithEmailAndPassword","sendEmailVerification","ref","set","get","useNavigate","toast","Register","setHandlers","setLoading","_s","emailSent","setEmailSent","navigate","Users","setUsers","name","branch","email","studentId","handleSendVerification","handleRegister","e","_document$getElementB","_document$getElementB2","_document$getElementB3","_document$getElementB4","_document$getElementB5","_document$getElementB6","preventDefault","document","getElementById","value","password","confirmPassword","error","test","studentIdRef","console","log","snapshot","exists","code","message","userCredential","user","success","_document$getElementB7","_document$getElementB8","_document$getElementB9","_document$getElementB10","currentUser","reload","emailVerified","userData","uid","emailResponse","fetch","method","headers","body","JSON","stringify","ok","Error","replace","_c","$RefreshReg$"],"sources":["E:/Btech 4th sem/mini project/Mini project/src/Components/register.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { auth, database } from \"./firebase\";\r\nimport { createUserWithEmailAndPassword, sendEmailVerification } from \"firebase/auth\";\r\nimport { ref, set, get } from \"firebase/database\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nfunction Register({ setHandlers, setLoading }) {\r\n  const [emailSent, setEmailSent] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [Users, setUsers] = useState({\r\n    name: \"\",\r\n    branch: \"\",\r\n    email: \"\",\r\n    studentId: \"\",\r\n  });\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (setHandlers) {\r\n      setHandlers({\r\n        handleSendVerification,\r\n        handleRegister,\r\n      });\r\n    }\r\n  }, [setHandlers]);\r\n\r\n  const handleSendVerification = async (e) => {\r\n    e.preventDefault();\r\n\r\n    \r\n\r\n    const name = document.getElementById(\"name_input\")?.value;\r\n    const branch = document.getElementById(\"branch\")?.value;\r\n    const email = document.getElementById(\"email\")?.value;\r\n    const password = document.getElementById(\"password\")?.value;\r\n    const confirmPassword = document.getElementById(\"confirm_password\")?.value;\r\n    const studentId = document.getElementById(\"student_id_input\")?.value;\r\n\r\n    if (!email || !password || !confirmPassword || !studentId || !name || !branch)\r\n    {\r\n      toast.error(\"All fields are required!\");\r\n      return;\r\n\r\n    }\r\n\r\n    if (!/^\\d{10}$/.test(studentId)) \r\n    {\r\n      toast.error(\"Enter a valid Student ID!\");\r\n      return;\r\n    }\r\n    else{\r\n      try {\r\n        // Check if studentId already exists\r\n        const studentIdRef = ref(database, \"studentId/\" + studentId);\r\n        console.log(\"Checking student ID at path:\", studentIdRef);\r\n        const snapshot = await get(studentIdRef);\r\n        console.log(\"Snapshot exists:\", snapshot.exists());\r\n\r\n        if (snapshot.exists()) \r\n        {\r\n          toast.error(\"Student ID already exists.\");\r\n          return;\r\n\r\n        }\r\n      } \r\n      catch (error) \r\n      {\r\n        console.error(\"Firebase get() error:\", error.code, error.message);\r\n        toast.error(\"Error checking Student ID. Try again.\");\r\n        return;\r\n\r\n      }\r\n    }\r\n\r\n    if (password !== confirmPassword) \r\n    {\r\n      toast.error(\"Passwords do not match!\");\r\n      return;\r\n\r\n    }\r\n\r\n    try \r\n    {\r\n\r\n      setLoading(true);\r\n\r\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n      const user = userCredential.user;\r\n\r\n      await sendEmailVerification(user);\r\n\r\n      \r\n      toast.success(\"Verification email sent! Please check your email.\");\r\n      setEmailSent(true);\r\n    } \r\n    catch (error) \r\n    {\r\n      toast.error(error.message);\r\n\r\n    }\r\n    finally\r\n    {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n  const handleRegister = async (e) => {\r\n    e.preventDefault();\r\n    const user = auth.currentUser;\r\n  \r\n    if (!user) {\r\n      toast.error(\"No user found! Please send verification email first.\");\r\n      return;\r\n    }\r\n  \r\n    await user.reload();\r\n    if (!user.emailVerified) {\r\n      toast.error(\"Please verify your email before registering.\");\r\n      return;\r\n    }\r\n  \r\n    const studentId = document.getElementById(\"student_id_input\")?.value;\r\n    const userData = {\r\n      name: document.getElementById(\"name_input\")?.value,\r\n      branch: document.getElementById(\"branch\")?.value,\r\n      email: document.getElementById(\"email\")?.value,\r\n      studentId: studentId\r\n    };\r\n  \r\n    try {\r\n      await set(ref(database, \"studentId/\" + studentId), { uid: user.uid });\r\n      await set(ref(database, \"users/\" + user.uid), userData);\r\n  \r\n      const emailResponse = await fetch('http://localhost:3001/api/emails', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          email: userData.email,\r\n          name: userData.name\r\n        }),\r\n      });\r\n  \r\n      if (!emailResponse.ok) {\r\n        throw new Error('Failed to send welcome email');\r\n      }\r\n  \r\n      console.log(\"User data saved and welcome email sent!\");\r\n      toast.success(\"Registration successful!\");\r\n      navigate(\"/page3\", { replace: true });\r\n  \r\n    } catch (error) {\r\n      console.error(\"Error:\", error.message);\r\n      toast.error(error.message);\r\n    }\r\n  };\r\n  return null;\r\n}\r\n\r\nexport default Register;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}