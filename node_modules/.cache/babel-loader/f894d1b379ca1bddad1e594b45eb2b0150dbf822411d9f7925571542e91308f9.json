{"ast":null,"code":"import { ref, push, set, get } from \"firebase/database\";\nimport { database, auth } from \"./firebase.js\";\nimport { supabase } from \"./supabase.js\";\nexport async function reportItemResponse(itemId, answer, imageBlob) {\n  try {\n    const user = auth.currentUser;\n    if (!user) {\n      throw new Error(\"User is not authenticated.\");\n    }\n    let itemType = null;\n    let itemName = null;\n    let itemDescription = null;\n    let question = null;\n    let foundMatch = false;\n    let postedBy = null;\n    const lostRef = ref(database, \"lost\");\n    const lostSnapshot = await get(lostRef);\n    if (lostSnapshot.exists()) {\n      const lostData = lostSnapshot.val();\n      for (const userId in lostData) {\n        if (Object.prototype.hasOwnProperty.call(lostData, userId)) {\n          const userItems = lostData[userId];\n          if (userItems[itemId]) {\n            itemType = \"lost\";\n            itemName = userItems[itemId].itemName || \"Unknown\";\n            itemDescription = userItems[itemId].description || \"\";\n            question = userItems[itemId].question || \"\";\n            postedBy = userId;\n            foundMatch = true;\n            break;\n          }\n        }\n      }\n    }\n    if (!foundMatch) {\n      const foundRef = ref(database, \"found\");\n      const foundSnapshot = await get(foundRef);\n      if (foundSnapshot.exists()) {\n        const foundData = foundSnapshot.val();\n        for (const userId in foundData) {\n          if (Object.prototype.hasOwnProperty.call(foundData, userId)) {\n            const userItems = foundData[userId];\n            if (userItems[itemId]) {\n              itemType = \"found\";\n              itemName = userItems[itemId].itemName || \"Unknown\";\n              itemDescription = userItems[itemId].description || \"\";\n              question = userItems[itemId].question || \"\";\n              postedBy = userId;\n              foundMatch = true;\n              break;\n            }\n          }\n        }\n      }\n    }\n    if (!foundMatch) {\n      throw new Error(\"Item data not found in 'lost' or 'found' database nodes.\");\n    }\n    const fileName = `${Date.now()}_${imageBlob.name || \"response.jpg\"}`;\n    const {\n      data: uploadData,\n      error: uploadError\n    } = await supabase.storage.from(\"responses\").upload(fileName, imageBlob);\n    if (uploadError) {\n      throw uploadError;\n    }\n    const {\n      data: publicData,\n      error: publicError\n    } = supabase.storage.from(\"responses\").getPublicUrl(uploadData.path);\n    if (publicError) {\n      throw publicError;\n    }\n    const imageUrl = publicData.publicUrl;\n    const timestamp = new Date();\n    const formattedTime = `${timestamp.getDate()}-${timestamp.getMonth() + 1}-${timestamp.getFullYear()} ${timestamp.toLocaleTimeString(\"en-US\", {\n      hour12: false,\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\"\n    })}`;\n    const responseData = {\n      itemId,\n      itemType,\n      itemName,\n      itemDescription,\n      question,\n      answer,\n      imageUrl,\n      timestamp: formattedTime,\n      postedBy,\n      responseStatus: \"Moderation\"\n    };\n    const responsesRef = ref(database, `responses/${itemId}/${user.uid}`);\n    await set(responsesRef, responseData);\n    const myResponsesData = {\n      itemId,\n      itemName,\n      itemType,\n      itemDescription,\n      question,\n      answer,\n      timestamp: formattedTime\n    };\n    const myResponsesRef = ref(database, `my_responses/${user.uid}`);\n    const newMyResponsesRef = push(myResponsesRef);\n    await set(newMyResponsesRef, myResponsesData);\n    return {\n      success: true,\n      data: responseData,\n      message: \"Response submitted successfully!\"\n    };\n  } catch (error) {\n    console.error(\"Error in reporting item response:\", error);\n    return {\n      success: false,\n      error: error.message,\n      message: \"Failed to submit response.\"\n    };\n  }\n}","map":{"version":3,"names":["ref","push","set","get","database","auth","supabase","reportItemResponse","itemId","answer","imageBlob","user","currentUser","Error","itemType","itemName","itemDescription","question","foundMatch","postedBy","lostRef","lostSnapshot","exists","lostData","val","userId","Object","prototype","hasOwnProperty","call","userItems","description","foundRef","foundSnapshot","foundData","fileName","Date","now","name","data","uploadData","error","uploadError","storage","from","upload","publicData","publicError","getPublicUrl","path","imageUrl","publicUrl","timestamp","formattedTime","getDate","getMonth","getFullYear","toLocaleTimeString","hour12","hour","minute","second","responseData","responseStatus","responsesRef","uid","myResponsesData","myResponsesRef","newMyResponsesRef","success","message","console"],"sources":["E:/Btech 4th sem/mini project/Mini project/src/Components/report_item_response.js"],"sourcesContent":["import { ref, push, set, get } from \"firebase/database\";\r\nimport { database, auth } from \"./firebase.js\";\r\nimport { supabase } from \"./supabase.js\";\r\n\r\nexport async function reportItemResponse(itemId, answer, imageBlob) {\r\n  try {\r\n \r\n    const user = auth.currentUser;\r\n    if (!user) {\r\n      throw new Error(\"User is not authenticated.\");\r\n    }\r\n\r\n    let itemType = null;\r\n    let itemName = null;\r\n    let itemDescription = null;\r\n    let question = null;\r\n    let foundMatch = false;\r\n    let postedBy = null;\r\n\r\n\r\n    const lostRef = ref(database, \"lost\");\r\n    const lostSnapshot = await get(lostRef);\r\n    if (lostSnapshot.exists()) {\r\n      const lostData = lostSnapshot.val();\r\n      for (const userId in lostData) {\r\n        if (Object.prototype.hasOwnProperty.call(lostData, userId)) {\r\n          const userItems = lostData[userId];\r\n          if (userItems[itemId]) {\r\n            itemType = \"lost\";\r\n            itemName = userItems[itemId].itemName || \"Unknown\";\r\n            itemDescription = userItems[itemId].description || \"\";\r\n            question = userItems[itemId].question || \"\";\r\n            postedBy = userId;  \r\n            foundMatch = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    if (!foundMatch) {\r\n      const foundRef = ref(database, \"found\");\r\n      const foundSnapshot = await get(foundRef);\r\n      if (foundSnapshot.exists()) {\r\n        const foundData = foundSnapshot.val();\r\n        for (const userId in foundData) {\r\n          if (Object.prototype.hasOwnProperty.call(foundData, userId)) {\r\n            const userItems = foundData[userId];\r\n            if (userItems[itemId]) {\r\n              itemType = \"found\";\r\n              itemName = userItems[itemId].itemName || \"Unknown\";\r\n              itemDescription = userItems[itemId].description || \"\";\r\n              question = userItems[itemId].question || \"\";\r\n              postedBy = userId;  \r\n              foundMatch = true;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n  \r\n    if (!foundMatch) {\r\n      throw new Error(\"Item data not found in 'lost' or 'found' database nodes.\");\r\n    }\r\n\r\n    const fileName = `${Date.now()}_${imageBlob.name || \"response.jpg\"}`;\r\n    const { data: uploadData, error: uploadError } = await supabase\r\n      .storage\r\n      .from(\"responses\")\r\n      .upload(fileName, imageBlob);\r\n\r\n    if (uploadError) {\r\n      throw uploadError;\r\n    }\r\n\r\n\r\n    const { data: publicData, error: publicError } = supabase\r\n      .storage\r\n      .from(\"responses\")\r\n      .getPublicUrl(uploadData.path);\r\n\r\n    if (publicError) {\r\n      throw publicError;\r\n    }\r\n\r\n    const imageUrl = publicData.publicUrl;\r\n\r\n\r\n    const timestamp = new Date();\r\n    const formattedTime = `${timestamp.getDate()}-${\r\n      timestamp.getMonth() + 1\r\n    }-${timestamp.getFullYear()} ${timestamp.toLocaleTimeString(\"en-US\", {\r\n      hour12: false,\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n      second: \"2-digit\",\r\n    })}`;\r\n\r\n\r\n    const responseData = {\r\n      itemId,\r\n      itemType,\r\n      itemName,\r\n      itemDescription,\r\n      question,\r\n      answer,\r\n      imageUrl,\r\n      timestamp: formattedTime,\r\n      postedBy,\r\n      responseStatus: \"Moderation\",\r\n    };\r\n\r\n\r\n    const responsesRef = ref(database, `responses/${itemId}/${user.uid}`);\r\n    await set(responsesRef, responseData);\r\n\r\n    const myResponsesData = {\r\n      itemId,\r\n      itemName,\r\n      itemType,\r\n      itemDescription,\r\n      question,\r\n      answer,\r\n      timestamp: formattedTime,\r\n    };\r\n    const myResponsesRef = ref(database, `my_responses/${user.uid}`);\r\n    const newMyResponsesRef = push(myResponsesRef);\r\n    await set(newMyResponsesRef, myResponsesData);\r\n\r\n\r\n    return {\r\n      success: true,\r\n      data: responseData,\r\n      message: \"Response submitted successfully!\",\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error in reporting item response:\", error);\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      message: \"Failed to submit response.\",\r\n    };\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}