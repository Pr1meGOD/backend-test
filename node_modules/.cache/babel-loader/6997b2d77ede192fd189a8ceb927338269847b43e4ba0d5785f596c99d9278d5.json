{"ast":null,"code":"import { ref, push, set, update } from \"firebase/database\";\nimport { database } from \"./firebase\";\nexport const createChatListEntry = async (userId, peerId, peerName) => {\n  try {\n    const senderChatRef = ref(database, `ChatList/${userId}/${peerId}`);\n    const receiverChatRef = ref(database, `ChatList/${peerId}/${userId}`);\n    const chatEntrySender = {\n      peerName,\n      lastUpdated: Date.now()\n    };\n    const chatEntryReceiver = {\n      peerName: \"You\",\n      lastUpdated: Date.now()\n    };\n    await update(senderChatRef, chatEntrySender);\n    await update(receiverChatRef, chatEntryReceiver);\n  } catch (error) {\n    console.error(\"Error creating chat list entry:\", error);\n    throw error;\n  }\n};\nexport const sendChatMessage = async (senderId, senderName, receiverId, receiverName, message) => {\n  try {\n    const trimmedMessage = message.trim();\n    if (trimmedMessage === \"\") throw new Error(\"Message cannot be empty.\");\n    const chatsRef = ref(database, \"Chats\");\n    const newMessageRef = push(chatsRef);\n    const messageData = {\n      isseen: false,\n      message: trimmedMessage,\n      messageId: newMessageRef.key,\n      receiverId,\n      senderId,\n      timestamp: Date.now()\n    };\n    await set(newMessageRef, messageData);\n    await createChatListEntry(senderId, receiverId, receiverName);\n    await createChatListEntry(receiverId, senderId, senderName);\n    return messageData;\n  } catch (error) {\n    console.error(\"Error sending chat message:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["ref","push","set","update","database","createChatListEntry","userId","peerId","peerName","senderChatRef","receiverChatRef","chatEntrySender","lastUpdated","Date","now","chatEntryReceiver","error","console","sendChatMessage","senderId","senderName","receiverId","receiverName","message","trimmedMessage","trim","Error","chatsRef","newMessageRef","messageData","isseen","messageId","key","timestamp"],"sources":["E:/Btech 4th sem/mini project/Mini project/src/Components/chat.js"],"sourcesContent":["import { ref, push, set, update } from \"firebase/database\";\r\nimport { database } from \"./firebase\";\r\n\r\n\r\nexport const createChatListEntry = async (userId, peerId, peerName) => {\r\n  try {\r\n    const senderChatRef = ref(database, `ChatList/${userId}/${peerId}`);\r\n    const receiverChatRef = ref(database, `ChatList/${peerId}/${userId}`);\r\n    \r\n\r\n    const chatEntrySender = { peerName, lastUpdated: Date.now() };\r\n    const chatEntryReceiver = { peerName: \"You\", lastUpdated: Date.now() };\r\n\r\n    await update(senderChatRef, chatEntrySender);\r\n    await update(receiverChatRef, chatEntryReceiver);\r\n  } catch (error) {\r\n    console.error(\"Error creating chat list entry:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nexport const sendChatMessage = async (senderId, senderName, receiverId, receiverName, message) => {\r\n  try {\r\n    const trimmedMessage = message.trim();\r\n    if (trimmedMessage === \"\") throw new Error(\"Message cannot be empty.\");\r\n    \r\n    const chatsRef = ref(database, \"Chats\");\r\n    const newMessageRef = push(chatsRef);\r\n    const messageData = {\r\n      isseen: false,\r\n      message: trimmedMessage,\r\n      messageId: newMessageRef.key,\r\n      receiverId,\r\n      senderId,\r\n      timestamp: Date.now(),\r\n    };\r\n\r\n    await set(newMessageRef, messageData);\r\n\r\n\r\n    await createChatListEntry(senderId, receiverId, receiverName);\r\n    await createChatListEntry(receiverId, senderId, senderName);\r\n\r\n    return messageData;\r\n  } catch (error) {\r\n    console.error(\"Error sending chat message:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,MAAM,QAAQ,mBAAmB;AAC1D,SAASC,QAAQ,QAAQ,YAAY;AAGrC,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAOC,MAAM,EAAEC,MAAM,EAAEC,QAAQ,KAAK;EACrE,IAAI;IACF,MAAMC,aAAa,GAAGT,GAAG,CAACI,QAAQ,EAAE,YAAYE,MAAM,IAAIC,MAAM,EAAE,CAAC;IACnE,MAAMG,eAAe,GAAGV,GAAG,CAACI,QAAQ,EAAE,YAAYG,MAAM,IAAID,MAAM,EAAE,CAAC;IAGrE,MAAMK,eAAe,GAAG;MAAEH,QAAQ;MAAEI,WAAW,EAAEC,IAAI,CAACC,GAAG,CAAC;IAAE,CAAC;IAC7D,MAAMC,iBAAiB,GAAG;MAAEP,QAAQ,EAAE,KAAK;MAAEI,WAAW,EAAEC,IAAI,CAACC,GAAG,CAAC;IAAE,CAAC;IAEtE,MAAMX,MAAM,CAACM,aAAa,EAAEE,eAAe,CAAC;IAC5C,MAAMR,MAAM,CAACO,eAAe,EAAEK,iBAAiB,CAAC;EAClD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;AAGD,OAAO,MAAME,eAAe,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,UAAU,EAAEC,UAAU,EAAEC,YAAY,EAAEC,OAAO,KAAK;EAChG,IAAI;IACF,MAAMC,cAAc,GAAGD,OAAO,CAACE,IAAI,CAAC,CAAC;IACrC,IAAID,cAAc,KAAK,EAAE,EAAE,MAAM,IAAIE,KAAK,CAAC,0BAA0B,CAAC;IAEtE,MAAMC,QAAQ,GAAG3B,GAAG,CAACI,QAAQ,EAAE,OAAO,CAAC;IACvC,MAAMwB,aAAa,GAAG3B,IAAI,CAAC0B,QAAQ,CAAC;IACpC,MAAME,WAAW,GAAG;MAClBC,MAAM,EAAE,KAAK;MACbP,OAAO,EAAEC,cAAc;MACvBO,SAAS,EAAEH,aAAa,CAACI,GAAG;MAC5BX,UAAU;MACVF,QAAQ;MACRc,SAAS,EAAEpB,IAAI,CAACC,GAAG,CAAC;IACtB,CAAC;IAED,MAAMZ,GAAG,CAAC0B,aAAa,EAAEC,WAAW,CAAC;IAGrC,MAAMxB,mBAAmB,CAACc,QAAQ,EAAEE,UAAU,EAAEC,YAAY,CAAC;IAC7D,MAAMjB,mBAAmB,CAACgB,UAAU,EAAEF,QAAQ,EAAEC,UAAU,CAAC;IAE3D,OAAOS,WAAW;EACpB,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}