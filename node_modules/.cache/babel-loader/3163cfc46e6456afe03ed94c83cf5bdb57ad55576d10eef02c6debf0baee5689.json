{"ast":null,"code":"// report_item.js\nimport { ref, push, set, get } from \"firebase/database\";\nimport { database, auth } from \"./firebase.js\";\nimport { supabase } from \"./supabase.js\";\nexport async function reportItem(formData, imageBlob) {\n  try {\n    const user = auth.currentUser;\n    if (!user) {\n      throw new Error(\"User is not authenticated.\");\n    }\n    const userId = user.uid;\n    const userRef = ref(database, `users/${userId}`);\n    const userSnapshot = await get(userRef);\n    if (!userSnapshot.exists()) {\n      throw new Error(\"User data not found in the database.\");\n    }\n    const userData = userSnapshot.val();\n    const username = userData.name || \"Anonymous\";\n\n    // Decide whether it's lost or found\n    const itemTypeLower = formData.itemType.toLowerCase();\n    let bucket;\n    if (itemTypeLower === \"lost\") {\n      bucket = \"lost\";\n    } else if (itemTypeLower === \"found\") {\n      bucket = \"found\";\n    } else {\n      throw new Error(\"Invalid item type. Must be 'Lost' or 'Found'.\");\n    }\n\n    // Upload image to Supabase\n    const fileName = `${Date.now()}_${imageBlob.name || \"image.jpg\"}`;\n    const {\n      data: uploadData,\n      error: uploadError\n    } = await supabase.storage.from(bucket).upload(fileName, imageBlob);\n    if (uploadError) {\n      throw uploadError;\n    }\n\n    // Get the public URL for the uploaded image\n    const {\n      data: publicData,\n      error: publicError\n    } = supabase.storage.from(bucket).getPublicUrl(uploadData.path);\n    if (publicError) {\n      throw publicError;\n    }\n    const imageUrl = publicData.publicUrl;\n\n    // Format the timestamp\n    const timestamp = new Date();\n    const formattedTime = `${timestamp.getDate()}-${timestamp.getMonth() + 1}-${timestamp.getFullYear()} ${timestamp.toLocaleTimeString(\"en-US\", {\n      hour12: false,\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\"\n    })}`;\n\n    // Data for this reported item\n    const reportData = {\n      itemName: formData.itemName,\n      description: formData.description,\n      question: formData.question,\n      itemType: formData.itemType,\n      imageUrl,\n      timestamp: formattedTime\n    };\n\n    // Create one push key\n    const myReportsRef = ref(database, `myreports/${userId}_${username}`);\n    const newMyReportRef = push(myReportsRef); // single push key\n    const pushKey = newMyReportRef.key;\n\n    // Store the same push key data in myreports\n    await set(newMyReportRef, reportData);\n\n    // Also store under lost or found with the SAME push key\n    if (itemTypeLower === \"lost\") {\n      const lostRef = ref(database, `lost/${userId}/${pushKey}`);\n      await set(lostRef, reportData);\n    } else if (itemTypeLower === \"found\") {\n      const foundRef = ref(database, `found/${userId}/${pushKey}`);\n      await set(foundRef, reportData);\n    }\n\n    // Return success, including the new push key\n    return {\n      success: true,\n      data: {\n        id: pushKey,\n        ...reportData\n      }\n    };\n  } catch (error) {\n    console.error(\"Error in reporting item:\", error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n}","map":{"version":3,"names":["ref","push","set","get","database","auth","supabase","reportItem","formData","imageBlob","user","currentUser","Error","userId","uid","userRef","userSnapshot","exists","userData","val","username","name","itemTypeLower","itemType","toLowerCase","bucket","fileName","Date","now","data","uploadData","error","uploadError","storage","from","upload","publicData","publicError","getPublicUrl","path","imageUrl","publicUrl","timestamp","formattedTime","getDate","getMonth","getFullYear","toLocaleTimeString","hour12","hour","minute","second","reportData","itemName","description","question","myReportsRef","newMyReportRef","pushKey","key","lostRef","foundRef","success","id","console","message"],"sources":["E:/Btech 4th sem/mini project/Mini project/src/Components/report_item.js"],"sourcesContent":["// report_item.js\r\nimport { ref, push, set, get } from \"firebase/database\";\r\nimport { database, auth } from \"./firebase.js\";\r\nimport { supabase } from \"./supabase.js\";\r\n\r\nexport async function reportItem(formData, imageBlob) {\r\n  try {\r\n    const user = auth.currentUser;\r\n    if (!user) {\r\n      throw new Error(\"User is not authenticated.\");\r\n    }\r\n\r\n    const userId = user.uid;\r\n\r\n    const userRef = ref(database, `users/${userId}`);\r\n    const userSnapshot = await get(userRef);\r\n    if (!userSnapshot.exists()) {\r\n      throw new Error(\"User data not found in the database.\");\r\n    }\r\n\r\n    const userData = userSnapshot.val();\r\n    const username = userData.name || \"Anonymous\";\r\n\r\n    // Decide whether it's lost or found\r\n    const itemTypeLower = formData.itemType.toLowerCase();\r\n    let bucket;\r\n    if (itemTypeLower === \"lost\") {\r\n      bucket = \"lost\";\r\n    } else if (itemTypeLower === \"found\") {\r\n      bucket = \"found\";\r\n    } else {\r\n      throw new Error(\"Invalid item type. Must be 'Lost' or 'Found'.\");\r\n    }\r\n\r\n    // Upload image to Supabase\r\n    const fileName = `${Date.now()}_${imageBlob.name || \"image.jpg\"}`;\r\n    const { data: uploadData, error: uploadError } = await supabase\r\n      .storage\r\n      .from(bucket)\r\n      .upload(fileName, imageBlob);\r\n\r\n    if (uploadError) {\r\n      throw uploadError;\r\n    }\r\n\r\n    // Get the public URL for the uploaded image\r\n    const { data: publicData, error: publicError } = supabase\r\n      .storage\r\n      .from(bucket)\r\n      .getPublicUrl(uploadData.path);\r\n\r\n    if (publicError) {\r\n      throw publicError;\r\n    }\r\n    const imageUrl = publicData.publicUrl;\r\n\r\n    // Format the timestamp\r\n    const timestamp = new Date();\r\n    const formattedTime = `${timestamp.getDate()}-${\r\n      timestamp.getMonth() + 1\r\n    }-${timestamp.getFullYear()} ${timestamp.toLocaleTimeString(\"en-US\", {\r\n      hour12: false,\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n      second: \"2-digit\",\r\n    })}`;\r\n\r\n    // Data for this reported item\r\n    const reportData = {\r\n      itemName: formData.itemName,\r\n      description: formData.description,\r\n      question: formData.question,\r\n      itemType: formData.itemType,\r\n      imageUrl,\r\n      timestamp: formattedTime,\r\n    };\r\n\r\n    // Create one push key\r\n    const myReportsRef = ref(database, `myreports/${userId}_${username}`);\r\n    const newMyReportRef = push(myReportsRef); // single push key\r\n    const pushKey = newMyReportRef.key;\r\n\r\n    // Store the same push key data in myreports\r\n    await set(newMyReportRef, reportData);\r\n\r\n    // Also store under lost or found with the SAME push key\r\n    if (itemTypeLower === \"lost\") {\r\n      const lostRef = ref(database, `lost/${userId}/${pushKey}`);\r\n      await set(lostRef, reportData);\r\n    } else if (itemTypeLower === \"found\") {\r\n      const foundRef = ref(database, `found/${userId}/${pushKey}`);\r\n      await set(foundRef, reportData);\r\n    }\r\n\r\n    // Return success, including the new push key\r\n    return { success: true, data: { id: pushKey, ...reportData } };\r\n  } catch (error) {\r\n    console.error(\"Error in reporting item:\", error);\r\n    return { success: false, error: error.message };\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}