{"ast":null,"code":"import { database } from \"./firebase.js\";\nimport { ref, get } from \"firebase/database\";\nimport { auth } from \"./firebase.js\";\nexport const fetchUserListings = async () => {\n  try {\n    const user = auth.currentUser;\n    console.log(\"Current User:\", user);\n    if (!user) {\n      console.log(\"No user logged in.\");\n      return [];\n    }\n\n    // Extract only the userId (before the underscore)\n    const userId = user.uid;\n    console.log(\"Extracted User ID:\", userId);\n\n    // Fetch all user reports\n    const reportsRef = ref(database, \"myreports\");\n    const snapshot = await get(reportsRef);\n    if (!snapshot.exists()) {\n      console.log(\"No reports found in database.\");\n      return [];\n    }\n\n    // Find the correct key that starts with the userId\n    let matchedKey = null;\n    snapshot.forEach(childSnapshot => {\n      if (childSnapshot.key.startsWith(userId)) {\n        matchedKey = childSnapshot.key;\n      }\n    });\n    if (!matchedKey) {\n      console.log(\"No reported items found for this user.\");\n      return [];\n    }\n    console.log(\"Fetching data from:\", `myreports/${matchedKey}`);\n    const userReportsRef = ref(database, `myreports/${matchedKey}`);\n    const userSnapshot = await get(userReportsRef);\n    if (!userSnapshot.exists()) {\n      console.log(\"No reported items found for this user.\");\n      return [];\n    }\n    console.log(\"Fetched Data:\", userSnapshot.val());\n    let userItems = [];\n    userSnapshot.forEach(itemSnapshot => {\n      userItems.push({\n        id: itemSnapshot.key,\n        ...itemSnapshot.val()\n      });\n    });\n    console.log(\"Final Parsed Items:\", userItems);\n    return userItems;\n  } catch (error) {\n    console.error(\"Error fetching user listings:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["database","ref","get","auth","fetchUserListings","user","currentUser","console","log","userId","uid","reportsRef","snapshot","exists","matchedKey","forEach","childSnapshot","key","startsWith","userReportsRef","userSnapshot","val","userItems","itemSnapshot","push","id","error"],"sources":["E:/Btech 4th sem/mini project/Mini project/src/Components/mylisting.js"],"sourcesContent":["import { database } from \"./firebase.js\";\r\nimport { ref, get } from \"firebase/database\";\r\nimport { auth } from \"./firebase.js\"; \r\n\r\nexport const fetchUserListings = async () => {\r\n  try {\r\n    const user = auth.currentUser;\r\n    console.log(\"Current User:\", user);\r\n\r\n    if (!user) {\r\n      console.log(\"No user logged in.\");\r\n      return [];\r\n    }\r\n\r\n    // Extract only the userId (before the underscore)\r\n    const userId = user.uid;\r\n    console.log(\"Extracted User ID:\", userId);\r\n\r\n    // Fetch all user reports\r\n    const reportsRef = ref(database, \"myreports\");\r\n    const snapshot = await get(reportsRef);\r\n\r\n    if (!snapshot.exists()) {\r\n      console.log(\"No reports found in database.\");\r\n      return [];\r\n    }\r\n\r\n    // Find the correct key that starts with the userId\r\n    let matchedKey = null;\r\n    snapshot.forEach((childSnapshot) => {\r\n      if (childSnapshot.key.startsWith(userId)) {\r\n        matchedKey = childSnapshot.key;\r\n      }\r\n    });\r\n\r\n    if (!matchedKey) {\r\n      console.log(\"No reported items found for this user.\");\r\n      return [];\r\n    }\r\n\r\n    console.log(\"Fetching data from:\", `myreports/${matchedKey}`);\r\n\r\n    const userReportsRef = ref(database, `myreports/${matchedKey}`);\r\n    const userSnapshot = await get(userReportsRef);\r\n\r\n    if (!userSnapshot.exists()) {\r\n      console.log(\"No reported items found for this user.\");\r\n      return [];\r\n    }\r\n\r\n    console.log(\"Fetched Data:\", userSnapshot.val());\r\n\r\n    let userItems = [];\r\n    userSnapshot.forEach((itemSnapshot) => {\r\n      userItems.push({\r\n        id: itemSnapshot.key,\r\n        ...itemSnapshot.val(),\r\n      });\r\n    });\r\n\r\n    console.log(\"Final Parsed Items:\", userItems);\r\n    return userItems;\r\n  } catch (error) {\r\n    console.error(\"Error fetching user listings:\", error);\r\n    return [];\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,eAAe;AACxC,SAASC,GAAG,EAAEC,GAAG,QAAQ,mBAAmB;AAC5C,SAASC,IAAI,QAAQ,eAAe;AAEpC,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAI;IACF,MAAMC,IAAI,GAAGF,IAAI,CAACG,WAAW;IAC7BC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,IAAI,CAAC;IAElC,IAAI,CAACA,IAAI,EAAE;MACTE,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACjC,OAAO,EAAE;IACX;;IAEA;IACA,MAAMC,MAAM,GAAGJ,IAAI,CAACK,GAAG;IACvBH,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEC,MAAM,CAAC;;IAEzC;IACA,MAAME,UAAU,GAAGV,GAAG,CAACD,QAAQ,EAAE,WAAW,CAAC;IAC7C,MAAMY,QAAQ,GAAG,MAAMV,GAAG,CAACS,UAAU,CAAC;IAEtC,IAAI,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE;MACtBN,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC5C,OAAO,EAAE;IACX;;IAEA;IACA,IAAIM,UAAU,GAAG,IAAI;IACrBF,QAAQ,CAACG,OAAO,CAAEC,aAAa,IAAK;MAClC,IAAIA,aAAa,CAACC,GAAG,CAACC,UAAU,CAACT,MAAM,CAAC,EAAE;QACxCK,UAAU,GAAGE,aAAa,CAACC,GAAG;MAChC;IACF,CAAC,CAAC;IAEF,IAAI,CAACH,UAAU,EAAE;MACfP,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;MACrD,OAAO,EAAE;IACX;IAEAD,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE,aAAaM,UAAU,EAAE,CAAC;IAE7D,MAAMK,cAAc,GAAGlB,GAAG,CAACD,QAAQ,EAAE,aAAac,UAAU,EAAE,CAAC;IAC/D,MAAMM,YAAY,GAAG,MAAMlB,GAAG,CAACiB,cAAc,CAAC;IAE9C,IAAI,CAACC,YAAY,CAACP,MAAM,CAAC,CAAC,EAAE;MAC1BN,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;MACrD,OAAO,EAAE;IACX;IAEAD,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEY,YAAY,CAACC,GAAG,CAAC,CAAC,CAAC;IAEhD,IAAIC,SAAS,GAAG,EAAE;IAClBF,YAAY,CAACL,OAAO,CAAEQ,YAAY,IAAK;MACrCD,SAAS,CAACE,IAAI,CAAC;QACbC,EAAE,EAAEF,YAAY,CAACN,GAAG;QACpB,GAAGM,YAAY,CAACF,GAAG,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFd,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEc,SAAS,CAAC;IAC7C,OAAOA,SAAS;EAClB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdnB,OAAO,CAACmB,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}