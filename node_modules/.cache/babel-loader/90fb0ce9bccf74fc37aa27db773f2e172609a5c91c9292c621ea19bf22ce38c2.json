{"ast":null,"code":"// item_details.js\nimport { database, auth } from \"./firebase\";\nimport { ref, get } from \"firebase/database\";\n\n/**\r\n * Fetch details of a product from \"myreports\"\r\n * for the currently logged-in user, given the productId (push key).\r\n *\r\n * The item is stored at: myreports/{userId}_{username}/{productId}\r\n */\nexport const fetchProductDetails = async productId => {\n  try {\n    const user = auth.currentUser;\n    if (!user) {\n      console.log(\"No user is logged in, cannot fetch product details.\");\n      return null;\n    }\n    const userId = user.uid;\n    const reportsRef = ref(database, \"myreports\");\n    const snapshot = await get(reportsRef);\n    if (!snapshot.exists()) {\n      console.log(\"No data under 'myreports'.\");\n      return null;\n    }\n    let matchedKey = null;\n\n    // 1) We look for the node that starts with userId (e.g. \"userId_username\")\n    snapshot.forEach(childSnapshot => {\n      const key = childSnapshot.key;\n      if (key.startsWith(userId)) {\n        // 2) Check if inside that node we have productId\n        const childData = childSnapshot.val();\n        if (childData && childData[productId]) {\n          matchedKey = key;\n        }\n      }\n    });\n    if (!matchedKey) {\n      console.log(`Could not find product ${productId} under userId ${userId} in 'myreports'.`);\n      return null;\n    }\n\n    // 3) Retrieve that specific product's data\n    const productRef = ref(database, `myreports/${matchedKey}/${productId}`);\n    const productSnapshot = await get(productRef);\n    if (!productSnapshot.exists()) {\n      console.log(`No data found for productId ${productId} under ${matchedKey}`);\n      return null;\n    }\n    return {\n      id: productId,\n      ...productSnapshot.val()\n    };\n  } catch (error) {\n    console.error(\"Error fetching product details:\", error);\n    return null;\n  }\n};\n\n/**\r\n * Fetch all responses for a given product ID from \"responses/[productId]\".\r\n *\r\n * According to your 'report_item_response.js', each response is stored at:\r\n *   responses/{itemId}/{someUserUid} => { itemId, itemType, itemName, ... }\r\n */\nexport const fetchProductResponses = async productId => {\n  try {\n    const responsesRef = ref(database, `responses/${productId}`);\n    const snapshot = await get(responsesRef);\n    if (!snapshot.exists()) {\n      console.log(\"No responses found for product\", productId);\n      return [];\n    }\n    const responsesObj = snapshot.val();\n    // e.g. { userUid1: {...}, userUid2: {...}, ... }\n\n    // Convert that object into an array of objects\n    const responsesArray = Object.keys(responsesObj).map(userUid => {\n      const resp = responsesObj[userUid];\n      return {\n        id: userUid,\n        ...resp\n      };\n    });\n    return responsesArray;\n  } catch (error) {\n    console.error(\"Error fetching product responses:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["database","auth","ref","get","fetchProductDetails","productId","user","currentUser","console","log","userId","uid","reportsRef","snapshot","exists","matchedKey","forEach","childSnapshot","key","startsWith","childData","val","productRef","productSnapshot","id","error","fetchProductResponses","responsesRef","responsesObj","responsesArray","Object","keys","map","userUid","resp"],"sources":["E:/Btech 4th sem/mini project/Mini project/src/Components/item_details.js"],"sourcesContent":["// item_details.js\r\nimport { database, auth } from \"./firebase\";\r\nimport { ref, get } from \"firebase/database\";\r\n\r\n/**\r\n * Fetch details of a product from \"myreports\"\r\n * for the currently logged-in user, given the productId (push key).\r\n *\r\n * The item is stored at: myreports/{userId}_{username}/{productId}\r\n */\r\nexport const fetchProductDetails = async (productId) => {\r\n  try {\r\n    const user = auth.currentUser;\r\n    if (!user) {\r\n      console.log(\"No user is logged in, cannot fetch product details.\");\r\n      return null;\r\n    }\r\n\r\n    const userId = user.uid;\r\n    const reportsRef = ref(database, \"myreports\");\r\n    const snapshot = await get(reportsRef);\r\n\r\n    if (!snapshot.exists()) {\r\n      console.log(\"No data under 'myreports'.\");\r\n      return null;\r\n    }\r\n\r\n    let matchedKey = null;\r\n\r\n    // 1) We look for the node that starts with userId (e.g. \"userId_username\")\r\n    snapshot.forEach((childSnapshot) => {\r\n      const key = childSnapshot.key;\r\n      if (key.startsWith(userId)) {\r\n        // 2) Check if inside that node we have productId\r\n        const childData = childSnapshot.val();\r\n        if (childData && childData[productId]) {\r\n          matchedKey = key;\r\n        }\r\n      }\r\n    });\r\n\r\n    if (!matchedKey) {\r\n      console.log(\r\n        `Could not find product ${productId} under userId ${userId} in 'myreports'.`\r\n      );\r\n      return null;\r\n    }\r\n\r\n    // 3) Retrieve that specific product's data\r\n    const productRef = ref(database, `myreports/${matchedKey}/${productId}`);\r\n    const productSnapshot = await get(productRef);\r\n\r\n    if (!productSnapshot.exists()) {\r\n      console.log(\r\n        `No data found for productId ${productId} under ${matchedKey}`\r\n      );\r\n      return null;\r\n    }\r\n\r\n    return { id: productId, ...productSnapshot.val() };\r\n  } catch (error) {\r\n    console.error(\"Error fetching product details:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch all responses for a given product ID from \"responses/[productId]\".\r\n *\r\n * According to your 'report_item_response.js', each response is stored at:\r\n *   responses/{itemId}/{someUserUid} => { itemId, itemType, itemName, ... }\r\n */\r\nexport const fetchProductResponses = async (productId) => {\r\n  try {\r\n    const responsesRef = ref(database, `responses/${productId}`);\r\n    const snapshot = await get(responsesRef);\r\n\r\n    if (!snapshot.exists()) {\r\n      console.log(\"No responses found for product\", productId);\r\n      return [];\r\n    }\r\n\r\n    const responsesObj = snapshot.val();\r\n    // e.g. { userUid1: {...}, userUid2: {...}, ... }\r\n\r\n    // Convert that object into an array of objects\r\n    const responsesArray = Object.keys(responsesObj).map((userUid) => {\r\n      const resp = responsesObj[userUid];\r\n      return { id: userUid, ...resp };\r\n    });\r\n\r\n    return responsesArray;\r\n  } catch (error) {\r\n    console.error(\"Error fetching product responses:\", error);\r\n    return [];\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}