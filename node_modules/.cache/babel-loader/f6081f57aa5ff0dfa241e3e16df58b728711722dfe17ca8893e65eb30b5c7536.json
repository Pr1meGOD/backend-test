{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { auth, database } from \"./firebase.js\";\nimport { ref, get } from \"firebase/database\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nconst useUserData = () => {\n  _s();\n  const [userData, setUserData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async user => {\n      if (user) {\n        try {\n          const userRef = ref(database, `users/${user.uid}`);\n          const snapshot = await get(userRef);\n          if (snapshot.exists()) {\n            setUserData(snapshot.val());\n          } else {\n            console.error(\"User data not found in database.\");\n            setUserData(null);\n          }\n        } catch (error) {\n          console.error(\"Error fetching user data:\", error);\n          setUserData(null);\n        }\n      } else {\n        console.error(\"No authenticated user found.\");\n        setUserData(null);\n      }\n      setLoading(false);\n    });\n    return () => unsubscribe(); // Cleanup listener\n  }, []);\n  return {\n    userData,\n    loading\n  };\n};\n_s(useUserData, \"vhv7d1oa6lqjcjPHNBz2j0Rabdw=\");\nexport default useUserData;","map":{"version":3,"names":["useState","useEffect","auth","database","ref","get","onAuthStateChanged","useUserData","_s","userData","setUserData","loading","setLoading","unsubscribe","user","userRef","uid","snapshot","exists","val","console","error"],"sources":["E:/Btech 4th sem/mini project/Mini project/src/Components/home.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { auth, database } from \"./firebase.js\";\r\nimport { ref, get } from \"firebase/database\";\r\nimport { onAuthStateChanged } from \"firebase/auth\";\r\n\r\nconst useUserData = () => {\r\n  const [userData, setUserData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      if (user) {\r\n        try {\r\n          const userRef = ref(database, `users/${user.uid}`);\r\n          const snapshot = await get(userRef);\r\n          if (snapshot.exists()) {\r\n            setUserData(snapshot.val());\r\n          } else {\r\n            console.error(\"User data not found in database.\");\r\n            setUserData(null);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching user data:\", error);\r\n          setUserData(null);\r\n        }\r\n      } else {\r\n        console.error(\"No authenticated user found.\");\r\n        setUserData(null);\r\n      }\r\n      setLoading(false);\r\n    });\r\n\r\n    return () => unsubscribe(); // Cleanup listener\r\n  }, []);\r\n\r\n  return { userData, loading };\r\n};\r\n\r\nexport default useUserData;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,IAAI,EAAEC,QAAQ,QAAQ,eAAe;AAC9C,SAASC,GAAG,EAAEC,GAAG,QAAQ,mBAAmB;AAC5C,SAASC,kBAAkB,QAAQ,eAAe;AAElD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMY,WAAW,GAAGP,kBAAkB,CAACJ,IAAI,EAAE,MAAOY,IAAI,IAAK;MAC3D,IAAIA,IAAI,EAAE;QACR,IAAI;UACF,MAAMC,OAAO,GAAGX,GAAG,CAACD,QAAQ,EAAE,SAASW,IAAI,CAACE,GAAG,EAAE,CAAC;UAClD,MAAMC,QAAQ,GAAG,MAAMZ,GAAG,CAACU,OAAO,CAAC;UACnC,IAAIE,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE;YACrBR,WAAW,CAACO,QAAQ,CAACE,GAAG,CAAC,CAAC,CAAC;UAC7B,CAAC,MAAM;YACLC,OAAO,CAACC,KAAK,CAAC,kCAAkC,CAAC;YACjDX,WAAW,CAAC,IAAI,CAAC;UACnB;QACF,CAAC,CAAC,OAAOW,KAAK,EAAE;UACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;UACjDX,WAAW,CAAC,IAAI,CAAC;QACnB;MACF,CAAC,MAAM;QACLU,OAAO,CAACC,KAAK,CAAC,8BAA8B,CAAC;QAC7CX,WAAW,CAAC,IAAI,CAAC;MACnB;MACAE,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;IAEF,OAAO,MAAMC,WAAW,CAAC,CAAC,CAAC,CAAC;EAC9B,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEJ,QAAQ;IAAEE;EAAQ,CAAC;AAC9B,CAAC;AAACH,EAAA,CA/BID,WAAW;AAiCjB,eAAeA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}